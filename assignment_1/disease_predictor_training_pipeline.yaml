# PIPELINE DEFINITION
# Name: disease-prdictor-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_filename: str
#    model_repo: str
#    project_id: str
#    trigger_id: str
components:
  comp-compare-model:
    executorLabel: exec-compare-model
    inputDefinitions:
      parameters:
        knn_metrics:
          parameterType: STRUCT
        rf_metrics:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        run-build-trigger:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger
          dependentTasks:
          - upload-model-to-gcs
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-rf-out_model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-rf-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        run-build-trigger-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger-2
          dependentTasks:
          - upload-model-to-gcs-2
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger-2
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-knn-out_model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-knn-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-download-data:
    executorLabel: exec-download-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-run-build-trigger:
    executorLabel: exec-run-build-trigger
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-run-build-trigger-2:
    executorLabel: exec-run-build-trigger-2
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-train-knn:
    executorLabel: exec-train-knn
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-rf:
    executorLabel: exec-train-rf
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-compare-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_model(rf_metrics: dict, knn_metrics: dict) -> str:\n\
          \    import logging\n    import json\n    import sys\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n    logging.info(rf_metrics)\n    logging.info(knn_metrics)\n\
          \    if rf_metrics.get(\"accuracy\") > knn_metrics.get(\"accuracy\"):\n\
          \        return \"RF\"\n    else :\n        return \"KNN\"\n\n"
        image: python:3.10.7-slim
    exec-download-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloaing the file from a google bucket \n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info('Downloaded\
          \ Data!')\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n    import\
          \ sys\n    from google.cloud.devtools import cloudbuild_v1    \n    import\
          \ logging \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n    # Create a client\n    client = cloudbuild_v1.CloudBuildClient()\n\
          \    name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n    # Initialize request argument(s)\n    request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n        project_id=project_id,\n        trigger_id=trigger_id,\n\
          \        name=name\n    )\n\n    # Make the request\n    operation = client.run_build_trigger(request=request)\n\
          \n    logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n    import\
          \ sys\n    from google.cloud.devtools import cloudbuild_v1    \n    import\
          \ logging \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n    # Create a client\n    client = cloudbuild_v1.CloudBuildClient()\n\
          \    name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n    # Initialize request argument(s)\n    request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n        project_id=project_id,\n        trigger_id=trigger_id,\n\
          \        name=name\n    )\n\n    # Make the request\n    operation = client.run_build_trigger(request=request)\n\
          \n    logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-train-knn:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_knn
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_knn (features: Input[Dataset], out_model: Output[Model])\
          \ -> NamedTuple('outputs', metrics=dict):\n    '''train a KNN model with\
          \ default parameters'''\n    import pandas as pd\n    from sklearn.neighbors\
          \ import KNeighborsClassifier\n    from sklearn.metrics import accuracy_score\n\
          \    from sklearn.model_selection import train_test_split\n    import json\n\
          \    import logging \n    import sys\n    import os\n    import joblib \n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ df = pd.read_csv(features.path+\".csv\")\n\n    logging.info(df.columns)\
          \        \n\n    x_train, x_test, y_train, y_test = train_test_split(df.drop('Diagnosis',\
          \ axis = 1), \n                                                    df['Diagnosis'],\
          \ test_size=0.30, \n                                                   \
          \ random_state=101)\n    model_knn = KNeighborsClassifier()\n    model_knn.fit(x_train,y_train)\n\
          \n    y_pred = model_knn.predict(x_test)\n\n    metrics_dict = {\n     \
          \   \"accuracy\": accuracy_score(y_test, y_pred)\n    }\n\n    logging.info(metrics_dict)\
          \  \n\n    out_model.metadata[\"file_type\"] = \".joblib\"  \n    out_model.metadata[\"\
          algo\"] = \"KNN\"\n    # Save the model\n    m_file = out_model.path + \"\
          .joblib\"  \n    joblib.dump(model_knn, m_file)  \n\n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_rf (features: Input[Dataset], out_model: Output[Model])\
          \ -> NamedTuple('outputs', metrics=dict):\n    '''train a Random Forest\
          \ with default parameters'''\n    import pandas as pd\n    from sklearn.ensemble\
          \ import RandomForestClassifier\n    from sklearn.metrics import accuracy_score\n\
          \    from sklearn.model_selection import train_test_split\n    import json\n\
          \    import logging \n    import sys\n    import os\n    import joblib \
          \ # Changed pickle to joblib\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    df = pd.read_csv(features.path+\".csv\")\n\n\
          \    logging.info(df.columns)        \n\n    x_train, x_test, y_train, y_test\
          \ = train_test_split(df.drop('Diagnosis', axis = 1), \n                \
          \                                    df['Diagnosis'], test_size=0.30, \n\
          \                                                    random_state=101)\n\
          \n    model_rf = RandomForestClassifier()\n    model_rf.fit(x_train,y_train)\n\
          \n    y_pred=model_rf.predict(x_test)\n\n    metrics_dict = {\n        \"\
          accuracy\": accuracy_score(y_test, y_pred)\n    }\n    logging.info(metrics_dict)\
          \  \n\n    out_model.metadata[\"file_type\"] = \".joblib\"  \n    out_model.metadata[\"\
          algo\"] = \"RF\"\n    # Save the model\n    m_file = out_model.path + \"\
          .joblib\"  \n    joblib.dump(model_rf, m_file)  \n\n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('model' + str(model.metadata[\"file_type\"])) \n\
          \    blob.upload_from_filename(model.path + str(model.metadata[\"file_type\"\
          ]))       \n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n\
          \n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('model' + str(model.metadata[\"file_type\"])) \n\
          \    blob.upload_from_filename(model.path + str(model.metadata[\"file_type\"\
          ]))       \n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n\
          \n"
        image: python:3.10.7-slim
pipelineInfo:
  name: disease-prdictor-training-pipeline
root:
  dag:
    tasks:
      compare-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-model
        dependentTasks:
        - train-knn
        - train-rf
        inputs:
          parameters:
            knn_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-knn
            rf_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-rf
        taskInfo:
          name: compare-model
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-model
        - train-rf
        inputs:
          artifacts:
            pipelinechannel--train-rf-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-rf
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'RF'
      condition-2:
        componentRef:
          name: comp-condition-2
        dependentTasks:
        - compare-model
        - train-knn
        inputs:
          artifacts:
            pipelinechannel--train-knn-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-knn
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: condition-2
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'KNN'
      download-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: dataset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data
      train-knn:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-knn
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data
        taskInfo:
          name: train-knn
      train-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-rf
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data
        taskInfo:
          name: train-rf
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_filename:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
      trigger_id:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
